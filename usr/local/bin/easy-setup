#!/bin/sh

# Part of tiny-radioCD project, originally designed & hand-crafted by macmpi
# check License at project home https://github.com/macmpi/tiny-radioCD



# diskless: check ssh key existence and save accordingly
if !(grep -q "root=" /proc/cmdline); then
    if [ -e /etc/tiny-radiocd_ssh_nokeys ] && { \
[ -n "$(find /etc/dropbear/ -name 'dropbear_*_host_key' 2> /dev/null | head -1)" ] || \
[ -n "$(find /etc/ssh/ -name 'ssh_host_*' 2> /dev/null | head -1)" ]; }; then
        rm -f /etc/tiny-radiocd_ssh_nokeys
        service inotifyd stop > /dev/null 2>&1; lbu commit -d; service inotifyd start > /dev/null 2>&1
    fi
fi


# Manage Settings and files
[ -d /etc/tiny-radioCD ] || exit   #no easy config directory

###############################
# Wifi setup: we add new SSID before exiting config
# this ensure older config fallback (and multi-site usage)
SSID="$(grep '^SSID=\"' /etc/tiny-radioCD/tiny-radioCD.conf | sed -E 's/SSID="(.*)".*/\1/')"
PASS="$(grep '^Password=\"' /etc/tiny-radioCD/tiny-radioCD.conf | sed -E 's/Password="(.*)".*/\1/')"
SEC="$(grep '^Security=\"' /etc/tiny-radioCD/tiny-radioCD.conf | sed -E 's/Security="(.*)".*/\1/')"
COUNTRY="$(grep '^Country=\"' /etc/tiny-radioCD/tiny-radioCD.conf | sed -E 's/Country="(.*)".*/\1/')"

# Only touch if wireless interface exists and SSID set
if [ -e /sys/class/net/wlan0 ] && [ -n "$SSID" ]; then

   echo "Setting $SSID wifi network..."
   TOUCHED=false
   # Take care of network interfaces: add wlanO if not available
   cat /etc/network/interfaces | grep -q "wlan0" || \
{ echo "auto wlan0" >> /etc/network/interfaces; \
echo "iface wlan0 inet dhcp" >> /etc/network/interfaces; TOUCHED=true; }

# Take care of wpa_supplicant

   case "$SEC" in
      "WPA-PSK")
          NEW="network={
	ssid=\"$SSID\"
	key_mgmt=$SEC
	psk=\"$PASS\"
}"
         ;;
      "open")
          NEW="network={
	ssid=\"$SSID\"
	key_mgmt=$SEC
}"
         ;;
   esac

   COUNTRY="country=$COUNTRY"
   CONFIG="$(grep -v "country=" /etc/wpa_supplicant/wpa_supplicant.conf 2> /dev/null)"

   case "$CONFIG" in
      *"$NEW"*) 	# config already exists, do nothing
      ;;

      *)           # add new config first
         printf "$COUNTRY\n\n" > /tmp/wpa_supplicant.conf
         printf "$NEW\n\n" >> /tmp/wpa_supplicant.conf
         printf "$CONFIG\n" >> /tmp/wpa_supplicant.conf
         mv /tmp/wpa_supplicant.conf /etc/wpa_supplicant/wpa_supplicant.conf
         TOUCHED=true

      ;;

   esac
      
   rm -f /tmp/wpa_supplicant.conf
   
   if $TOUCHED && { service networking status | grep -q started; }; then
      service wpa_supplicant restart
      service networking restart
   fi
fi


###############################
# Bluetooth pairing and speaker setup if successful (and is one)
# Bluetooth device references may be MAC address or names (or parts of)
# Take everything between enclosing quotes

if [ -e /sys/class/bluetooth/hci0 ]; then

    SPKR="$(grep '^Speaker=\"' /etc/tiny-radioCD/tiny-radioCD.conf | sed -E 's/Speaker="(.*)".*/\1/')"
    RMT="$(grep '^Remote=\"' /etc/tiny-radioCD/tiny-radioCD.conf | sed -E 's/Remote="(.*)".*/\1/')"

    # if they are MAC addresses, make them CAPITALS
    echo "$SPKR" | grep -q "[[:xdigit:]:]\{17\}" && \
    SPKR="$( printf "$SPKR" | grep -o "[[:xdigit:]:]\{17\}" | tr a-z A-Z )"

    echo "$RMT" | grep -q "[[:xdigit:]:]\{17\}" && \
    RMT="$( printf "$RMT" | grep -o "[[:xdigit:]:]\{17\}" | tr a-z A-Z )"

    DEVICES=""   # may be lines with spaces
    [ -n "$RMT" ] && DEVICES="$RMT
"
    [ -n "$SPKR" ] && DEVICES="$SPKR
$DEVICES"

    #  Bluetooth pairing & speaker connection
    LIST="$(bluetoothctl paired-devices)"  # responds with capitalized MAC & name

    [ -n "$DEVICES" ] && echo "Trying to pair new devices: $DEVICES"

    while IFS='' read -r device && [ -n "$device" ]; do
          case "$LIST" in
             *"$device"*)			# already paired
                 echo "$device was already paired"
                 ;;
             *)	     			# not yet paired, lets do it!
                 #echo pairing "$device"
                 address="$(pair-device "$device")" # pair-device returns MAC address
                 OK=$?
                 [ "$OK" -eq "0" ] && echo "$device paired successfully" || echo "$device pairing failed"

                 if [ "$OK" -eq "0" ] && [ "$device" = "$SPKR" ] && \
{ bluetoothctl info "$address" | grep -q "UUID: Audio Sink"; }; then
                    printf "$address" | set-speaker     # new speaker paired: set-it up for MPD
                 fi
                 ;;
          esac
    done <<EOF
$DEVICES
EOF

fi

###############################
# Import customized GLOBALS
[ -s /etc/tiny-radioCD/GLOBALS ] && \
{ echo "Importing GLOBALS"; install -m644 /etc/tiny-radioCD/GLOBALS /usr/local/bin/GLOBALS  > /dev/null 2>&1; }


###############################
# Import custom mpd.conf
[ -s /etc/tiny-radioCD/mpd.conf ] && \
{ echo "Importing mpd.conf"; install -m644 /etc/tiny-radioCD/mpd.conf /etc/mpd.conf  > /dev/null 2>&1; }


###############################
# Import custom remotes-mapping
[ -s /etc/tiny-radioCD/Remotes.map ] && \
{ echo "Importing Remotes.map"; install -m644 /etc/tiny-radioCD/Remotes.map /etc/acpi.map  > /dev/null 2>&1; }


###############################
# If custom playlists exist, pull-them into MPD playlist directory
[ -n "$(find /etc/tiny-radioCD/ -name '*.m3u' | head -1)" ] && echo "Importing Playlists"
install -m644 -o mpd -g audio /etc/tiny-radioCD/*.m3u /var/lib/mpd/playlists/.  > /dev/null 2>&1


###############################
# If custom tones exist, pull-them into MPD music/.tones directory
[ -n "$(find /etc/tiny-radioCD/ -name '*.mp3' | head -1)" ] && echo "Importing system tones"
install -m644 -o mpd -g audio /etc/tiny-radioCD/tone-*.mp3 /var/lib/mpd/music/.tones/. > /dev/null 2>&1


###############################
# other stuff?...


###############################
# If not in sys mode, commit changes
grep -q "root=" /proc/cmdline || \
{ service inotifyd stop > /dev/null 2>&1; lbu commit -d; service inotifyd start > /dev/null 2>&1; }

