#!/usr/bin/expect -f

# Part of tiny-radioCD project, originally designed & hand-crafted by macmpi
# check License at project home https://github.com/macmpi/tiny-radioCD


# Pairs by MAC Address (preferred) of by device name (or portion of it)
# Those references are provided as a string in input parameter
# MAC in CAPITALS, name portions without any special characters ()[], spaces OK
# output parameter delivers MAC address is pairing is successful

set reference [lindex $argv 0]; # ref might be MAC address (preferred) or a name portion
set address ""
set prompt "#"
set passkey "nil";        

proc abort {} {
   global prompt
   global address
   expect $prompt
   if { "$address" != "" } {
      send "remove $address\r"
      expect $prompt
   }
   send "exit\r"
   expect eof
}

log_user 0;      # suppress all logs to stdout: remove to enable or log_user 1
spawn bluetoothctl
expect $prompt

set timeout 1;   # if by chance is in available devices list, we save discovery
send "devices\r"
expect {
   "Device *$reference" {regexp {.*(([0-9A-F]{2}:){5}([0-9A-F]{2}))} $expect_out(buffer) -> address}
}
expect $prompt


if { "$address" == "" } {
   send "scan on\r";      #initiate discovery & search reference
   set timeout 60
   expect {
      -re "\[^L\]\\]\\sDevice\\s.*$reference" \
{regexp {.*(([0-9A-F]{2}:){5}([0-9A-F]{2}))} $expect_out(buffer) -> address}
      timeout {abort; exit 1}
   }

   send "scan off\r";    # stop discovery
   expect $prompt
}


send "pair $address\r"
set timeout 10
expect {
   "Pairing successful" {}
   "*Confirm passkey*\(yes\/no\):" {set passkey "confirm" }
   "*Enter PIN code:"  {set passkey "pin" }
   timeout {abort; exit 1}
}

if { "$passkey" != "nil" } {
   set timeout 15;     # give time for authenticated pairings
   if { "$passkey" == "confirm" } { send "yes\r" }
   if { "$passkey" == "pin" } { send "0000\r" }
   expect {
      "Pairing successful" {}
      timeout {abort; exit 1}
   }
}
expect $prompt

set timeout 2
send "trust $address\n"
expect "*trust succeeded";     # purely local no error expected
expect $prompt

send "connect $address\n";     # just for fun, we do not care much if fails
expect "Connection successful"
expect $prompt

send "exit\r"
expect eof

puts "$address"
exit 0
